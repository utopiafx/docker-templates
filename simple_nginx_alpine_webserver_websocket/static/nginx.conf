# user  nginx;

worker_processes  1;

# daemon off;

# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {

      # Note: Using technique above we could also
      # make multiple of them here 
      # and directing traffic to different servers like apache 
      # or another type of servers we have written in perhaps another language etc

      server {

        # write your server code here ...

        # note we listen to port 8087 here in the container
        # It has to be the same as we use in docker-compose.yml file's portmapping
        listen        8087;
        listen        [::]:8087;
        server_name   localhost;

        # This allows "static files" from the root
        root        /var/www/html;

        # Some headers, important for using static files
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;    # this one is important for the static file!

        # if you wanna "test" and directive every possible comb before using callback @nodejs
        location / {
           try_files $uri @nodejs;  
        }

        # If you using php (especially in phpfpm)
        # location /api {
        #   rewrite ^([^.\?]*[^/])$ $1/ break;
        #   proxy_pass http://php:80;
        # } 


        # This will now work as a "special" call you probably wanna make
        # that passing the /api call forward to the server on 8080 instead
        location /api/ {
          # only using this when not using LB (upstream)
          proxy_pass "http://nodejs:8080/api/";
        }

        location /test/ {
          proxy_pass "http://nodejs:8080/api-another/";
        }

        location @nodejs {
          proxy_pass http://nodejs:8080;
        }       

        # This down below is only for rejecting and handling different errors when we not 
        # has call the right port or/and url rest API
        # underline here is that you probably wanna create those html files and customize them a bit
        # and put them into the "root" of webserver. 

        error_page 404 /404.html;
        location = /40x.html {

        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        
        }

      }

      # you can add multiple server blocks here ...
}

