# user  nginx;

worker_processes  1;

# daemon off;

# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {

      # Note: Only use this when doing load-balancer or 
      # wanna control which server should be mapped to which port/url call
      upstream server-1 {
        # Note: you could use as many as you like
        # but startup with only one if you only have one server
        # and let that "app" has the port below is describing
        server localhost:8080;
        server localhost:8081; # note that this is the same app but it has been replicated to start again with another port 
                               # in docker you control this
      }

      # Note: Using technique above we could also
      # make multiple of them here 
      # and directing traffic to different servers like apache 
      # or another type of servers we have written in perhaps another language etc

      server {

        # write your server code here ...

        listen        80;
        listen        [::]:80;
        server_name   localhost;

        # This allows "static files"
        root        /var/www/html;

        # This is only for websocket connections
        location /websocket/ {

          # minimum setup for socket
          proxy_http_version 1.1;
          proxy_set_header  Upgrade $http_upgrade;
          proxy_set_header  Connection "Upgrade";

          # Note: only using this when not using LB (upstream)
          proxy_pass "http://localhost:8080/socket.io/";

          # if using LB (upstream) then use this instead
          # proxy_pass "http://server-1/socket.io/";
        }

        # This is for every other HTTP REST API call connection
        # Note: this won't land into conflict with the static files
        # when type /api in the browser or the HTTP GET/POST call you doing from the app
        # it will pass that forward to the server that is listen to the port 8080
        # and "consuming" or has route that /api to something else. 
        # other else call will be land into the root folder above
        # if it wasn't uncomment then the obvious would happen that is error like 404 would occure
        # that would also happens if no files is in the root either
        location /api/ {

          # only using this when not using LB (upstream)
          proxy_pass "http://localhost:8080/api/";

          # if using LB (upstream) then use this instead
          # proxy_pass "http://server-1/api/";
        }

        # This down below is only for rejecting and handling different errors when we not 
        # has call the right port or/and url rest API
        # underline here is that you probably wanna create those html files and customize them a bit
        # and put them into the "root" of webserver. 

        error_page 404 /404.html;
        location = /40x.html {

        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        
        }

      }

      # you can add multiple server blocks here ...
}

