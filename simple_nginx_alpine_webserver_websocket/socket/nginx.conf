# user  nginx;

worker_processes  1;

# daemon off;

# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {

      # Note: Using technique above we could also
      # make multiple of them here 
      # and directing traffic to different servers like apache 
      # or another type of servers we have written in perhaps another language etc

      server {

        # write your server code here ...

        # note we listen to port 8087 here in the container
        # It has to be the same as we use in docker-compose.yml file's portmapping
        listen        8087;
        listen        [::]:8087;
        server_name   localhost;    # should be your domain here


        # if you wanna "test" and directive every possible comb before using callback @nodejs
        # location / {
        #   try_files $uri @nodejs;  
        # }

        # If you using php (especially in phpfpm)
        # location /api {
        #   rewrite ^([^.\?]*[^/])$ $1/ break;
        #   proxy_pass http://php:80;
        # }

        # This is for every other HTTP REST API call connection
        # Note: you need this is you want the in the browser use rest API call or type routes in the URL address input
        # or else it would show 404
        location / {

          # Some headers
          # proxy_redirect    off;  # shut it off and do not redirect
          # proxy_set_header Host $http_host;
          # proxy_set_header X-Real-IP $remote_addr;
          # proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
          # proxy_set_header X-Forwarded-Proto  $scheme;
          # proxy_set_header X-Forwarded-Host   $server_name;

          # Only using this when not using LB (upstream), 
          # passing every call to the server, this server is listen to port 8080 in the container
          # IMPORTANT!! Note: that we using the nodejs service name
          proxy_pass "http://nodejs:8080/";
        }

        # NEW: this is for the socket only and specific!
        # Now don't missunderstood. the websocket to the client works anyway without this, but this one
        # is only restrict for communication between javascript on the client side directly to server without typing 
        # a rest API call or anything in the browsers URL address input.
        # Note: how to really use it is to connect directly to the client without the webrowser
        # but only throw socket.io now. So this is little special. If you type http://localhost:8082/websocket/
        # you will see "Transport unknown" which is expected, when only pure websocket communication works.
        # so this can only be done throw javascript on the client directly to server. So do NOT USE this as a URL call in the browser
        # this however is useful when building a chat application or realtime update of something, perhaps an Realtime Analytics or
        # Schemeplaner, game or TODO whatever. 
        location /websocket/ {
          
          # Minimum needed settings
          proxy_http_version  1.1;
          proxy_set_header    Upgrade     $http_upgrade;
          proxy_set_header    Connection  'upgrade';
          # proxy_set_header    Host        $host;      # not sure if this is needed here
          proxy_cache_bypass  $http_upgrade;

          proxy_pass  http://nodejs:8080/socket.io/;    # you could of course custom this so it passing forward to another port and domain/ip
        }

        # This down below is only for rejecting and handling different errors when we not 
        # has call the right port or/and url rest API
        # underline here is that you probably wanna create those html files and customize them a bit
        # and put them into the "root" of webserver. 

        error_page 404 /404.html;
        location = /40x.html {

        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        
        }

      }

      # you can add multiple server blocks here ...
}

